version: '3'
services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.2.1
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_CLIENT_PORT: 2181
    healthcheck:
      test: nc -z localhost 2181 || exit -1
      interval: 10s
      timeout: 5s
      retries: 3

  kafka:
    image: confluentinc/cp-kafka:7.2.1
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT_HOST://localhost:9092,PLAINTEXT://kafka:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
    depends_on:
      - zookeeper
    healthcheck:
      test: kafka-topics --bootstrap-server kafka:9092 --list
      interval: 30s
      timeout: 10s
      retries: 3

  init_kafka:
    image: docker.io/bitnami/kafka:3.2
    depends_on:
      kafka:
        condition: service_healthy
    entrypoint: [ '/bin/sh', '-c' ]
    command: |
      "
      kafka-topics --bootstrap-server kafka:29092 --list
      echo -e 'Creating kafka topics'
      kafka-topics --bootstrap-server kafka:29092 --create --if-not-exists --topic transactions --replication-factor 1 --partitions 1
      echo -e 'Successfully created the following topics:'
      kafka-topics --bootstrap-server kafka:29092 --list
      "
  kafdrop:
    image: obsidiandynamics/kafdrop
    restart: unless-stopped
    ports:
      - "9000:9000"
    environment:
      KAFKA_BROKERCONNECT: "kafka:29092"
      JVM_OPTS: "-Xms16M -Xmx48M -Xss180K -XX:-TieredCompilation -XX:+UseStringDeduplication -noverify"
    depends_on:
      - "kafka"

  db:
    image: postgres:14
    restart: always
    environment:
      - POSTGRES_USER=${POSTGRESQL_USER}
      - POSTGRES_PASSWORD=${POSTGRESQL_PASSWORD}
      - POSTGRES_DB=${POSTGRESQL_DB_NAME}
      - PGUSER=${POSTGRESQL_USER}
    expose:
      - "5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready", "-d", "${POSTGRESQL_DB_NAME}"]
      timeout: 2s
      retries: 15
  
  auth_migrations_runner:
    working_dir: /python/src/app
    build: ./django
    command: python3 manage.py migrate
    depends_on:
      db:
        condition: service_healthy
    environment:
      - POSTGRESQL_DB_USER=${POSTGRESQL_USER}
      - POSTGRESQL_DB_PASSWORD=${POSTGRESQL_PASSWORD}
      - POSTGRESQL_MASTER_DB_HOST=${POSTGRESQL_HOST}
      - POSTGRESQL_DB_PORT=${POSTGRESQL_PORT}
      - POSTGRESQL_DB_NAME=${POSTGRESQL_DB_NAME}
      - DJANGO_DEBUG
      - DJANGO_SECRET_KEY
      - DJANGO_JWT_PUBLIC_KEY
      - DJANGO_JWT_PRIVATE_KEY
      - DJANGO_SETTINGS_PATH
      - PYTHONPATH

  migrations_runner:
    build: ./migrations
    working_dir: /liquibase
    command: liquibase --log-level FINE --changelog-file=db.changelog-master.xml --search-path="/liquibase/db/changelog/dev/" --url jdbc:postgresql://db:5432/$POSTGRESQL_DB_NAME --username $POSTGRESQL_USER --password $POSTGRESQL_PASSWORD update
    depends_on:
      db:
        condition: service_healthy
      auth_migrations_runner:
        condition: service_completed_successfully
    environment:
      - POSTGRES_USER=${POSTGRESQL_USER}
      - POSTGRES_PASSWORD=${POSTGRESQL_PASSWORD}
      - POSTGRES_DB=${POSTGRESQL_DB_NAME}

  auth_microservice:
    working_dir: /python/src/app
    command: gunicorn -b 0.0.0.0:8000 -w 5 core.wsgi:application
    build: ./django
    depends_on:
      auth_migrations_runner:
        condition: service_completed_successfully
    environment:
      - POSTGRESQL_DB_USER=${POSTGRESQL_USER}
      - POSTGRESQL_DB_PASSWORD=${POSTGRESQL_PASSWORD}
      - POSTGRESQL_DB_HOST=${POSTGRESQL_HOST}
      - POSTGRESQL_DB_PORT=${POSTGRESQL_PORT}
      - POSTGRESQL_DB_NAME=${POSTGRESQL_DB_NAME}
      - DJANGO_DEBUG
      - DJANGO_SECRET_KEY
      - DJANGO_JWT_PUBLIC_KEY
      - DJANGO_JWT_PRIVATE_KEY
      - DJANGO_SETTINGS_PATH
      - PYTHONPATH
    ports:
     - "8000:8000"

  main_microservice:
    build: ./golang/banking
    depends_on:
      db:
        condition: service_healthy
      init_kafka:
        condition: service_started
      migrations_runner:
        condition: service_completed_successfully
    environment:
      - POSTGRESQL_MASTER_CONNECTION_URI
      - PUBLIC_KEY=${DJANGO_JWT_PUBLIC_KEY}
      - ENVIRONMENT
    ports:
      - "8001:8001"